class Node{
    constructor(val){
        this.val = val;
        this.next = null;
    }
}

class SinglyLinkedList{
    constructor(){
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    // push item to last of list
    push(val){
        var newNode = new Node(val);
        if(!this.head){
            this.head = newNode;
            this.tail = this.head;
        } else {
            this.tail.next = newNode;
            this.tail = newNode;
        }
        this.length++;
        return this;
    }
    //remove last item from list
    pop(){
      //if no items in list
      if(!this.head) return undefined;
      let current=this.head;
      let newTail=current;
      while(current.next){
        newTail=current;
        current=current.next;
      }
      this.tail=newTail;
      this.tail.next=null;
      this.length--;
      if(this.length===0){
        this.head = null;
        this.tail = null;
      }
      return current;
    }
    //remove first item from list
    shift(){
      //if no items in list
      if(!this.head) return undefined;
      let currentHead=this.head;
      this.head=currentHead.next
      this.length--;
       if(this.length===0){
        this.tail = null;
      }
       return currentHead;
      }
      
      //insert first item to list
    unshift(val){
      let newNode=new Node(val);
      if(!this.head){
        this.head=newNode;
        this.tail=this.head;
      }
      else{
        newNode.next=this.head;
        this.head=newNode;
      }
       this.length++;
       return this;
    }
      
      //get item from list at index
    get(index){
      if(index<0 || index >= this.length){
        return undefined;
      }
      let counter=0;
      let current=this.head;
      while(counter!==index){
        counter++;
        current=current.next;
      }
      return current;
    }
    
    //set or update value at index
    set(index,val){
     let nodeToUpdate=this.get(index);
     if(nodeToUpdate!==undefined){
       nodeToUpdate.val=val;
     }
      return this;
    }
       //remove item from list at index
    remove(index){
      if(index<0 || index >= this.length){
        return undefined;
      }
      if(index==0){
        return this.shift();
      }
      if(index==this.length-1){
        return this.pop();
      }
      let prevNode=this.get(index-1);
      let removedNode=prevNode.next;
      prevNode.next=removedNode.next;
      removedNode.next=null;
      return removedNode;
    }
  }


var list = new SinglyLinkedList()
list.push('1');
list.push('2');
list.push('3');
list.unshift('4');
console.log(list.get(3));
list.set(3,'8');
console.log(list.get(3));

