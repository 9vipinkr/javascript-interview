/*
There are n houses build in a line, 
each of which contains some value in it. 
A thief is going to steal the maximal value of these houses, 
but he can’t steal in two adjacent houses 
because owner of the stolen houses will tell his two neighbour left and 
right side.
What is the maximum stolen value.

*/

//Dynamic Programming
// top down approach
function houseThief(houseNetWorth,currentIndex){
  let stealCurrent;
  let skipCurrent;
  let dp=[]; 
  if(currentIndex>=houseNetWorth.length){
    return 0;
  }
  if(dp[currentIndex]===undefined){
   stealCurrent=houseNetWorth[currentIndex]+houseThief(houseNetWorth,currentIndex+2);
   skipCurrent=houseThief(houseNetWorth,currentIndex+1);
   dp[currentIndex]=Math.max(stealCurrent,skipCurrent);
  }
  return dp[currentIndex];
}

var t0 = performance.now();
let houseNetWorth=[6,7,1,30,8,2,4];
console.log(houseThief(houseNetWorth,0));
var t1 = performance.now();
console.log(t1-t0+ 'milliseconds');
 // o/p: 7,30,4 =41
 
 
 
 /*
There are n houses build in a line, 
each of which contains some value in it. 
A thief is going to steal the maximal value of these houses, 
but he can’t steal in two adjacent houses 
because owner of the stolen houses will tell his two neighbour left and 
right side.
What is the maximum stolen value.

*/

//Dynamic Programming
// bottom up approach
function houseThief(houseNetWorth,currentIndex){
  let  houseNetWorthLength=houseNetWorth.length;
  let dp=[];
   for(let i=0;i<houseNetWorthLength+2;i++){
     dp[i]=0;
   }
 for(let i=houseNetWorthLength-1;i>=0;i--){
   dp[i]=Math.max(houseNetWorth[i]+dp[i+2],dp[i+1]);
 }
 return dp[0];
}

var t0 = performance.now();
let houseNetWorth=[6,7,1,30,8,2,4];
console.log(houseThief(houseNetWorth,0));
var t1 = performance.now();
console.log(t1-t0+ 'milliseconds');

